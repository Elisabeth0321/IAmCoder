<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>